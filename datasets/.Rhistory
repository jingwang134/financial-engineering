rm(list=ls(all=TRUE))
niter = 1e5
below = rep(0,niter)#先初始化
profit= rep(0,niter)
set.seed(2009)
options(warn=-1)
for (i in 1:niter)
{
r = rnorm(100,mean=.05/253,sd=.23/sqrt(253))
logPrice = log(1e6) + cumsum(r)#本金&return
minlogP = min(logPrice)
below[i] = as.numeric(minlogP < log(950000))
}
#
mean(r)
mean(below)
mean(profit)
set.seed(2012)
n = 253
#pdf("FigA1.pdf",width = 6, height=6)  ########## Fig A.1
par(mfrow=c(3,3))
for (i in (1:9))
{
logr = rnorm(n,0.05/253,0.2/sqrt(253))
price = c(120,120*exp(cumsum(logr)))
plot(price,type="b")
}
#graphics.off()
bondvalue = function(c,T,r,par)
{
#
#   Computes bv = bond values (current prices) corresponding
#       to all values of yield to maturity in the
#       input vector r
#
#       INPUT
#        c = coupon payment (semi-annual)
#        T = time to maturity (in years)
#        r = vector of yields to maturity (semi-annual rates)
#        par = par value
#
bv = c/r + (par - c/r) * (1+r)^(-2*T)
bv
}
price = 1200    #   current price of the bond
C = 40          #   coupon payment
T= 30           #   time to maturity
par = 1000      #   par value of the bond
r = seq(.02,.05,length=300)
value = bondvalue(C,T,r,par)
yield2M = spline(value,r,xout=price)
bondvalue = function(c,T,r,par)
{
#
#   Computes bv = bond values (current prices) corresponding
#       to all values of yield to maturity in the
#       input vector r
#
#       INPUT
#        c = coupon payment (semi-annual)
#        T = time to maturity (in years)
#        r = vector of yields to maturity (semi-annual rates)
#        par = par value
#
bv = c/r + (par - c/r) * (1+r)^(-2*T)
bv
}
price = 1200    #   current price of the bond
C = 40          #   coupon payment
T= 30           #   time to maturity
par = 1000      #   par value of the bond
r = seq(.02,.05,length=300)
value = bondvalue(C,T,r,par)
yield2M = spline(value,r,xout=price)
plot(r,value,xlab='yield to maturity',ylab='price of bond',type="l",
main="par = 1000, coupon payment = 40, T = 30",lwd=2)
abline(h=1200,col="red")
abline(v=yield2M,col="red")
?spline
#As an alternative to interpolation, the yield to maturity can be found using a nonlinear root finder (equation solver) such as uniroot(), which is illustrated here:
uniroot(function(r) bondvalue(C,T,r,par) - price, c(0.001,.1))
################################################
#####  Code for figure 3.2  ####################
################################################
rates = as.matrix(read.table("WeeklyInterest.txt",header=F))
#As an alternative to interpolation, the yield to maturity can be found using a nonlinear root finder (equation solver) such as uniroot(), which is illustrated here:
uniroot(function(r) bondvalue(C,T,r,par) - price, c(0.001,.1))
################################################
#####  Code for figure 3.2  ####################
################################################
rates = as.matrix(read.table("WeeklyInterest.txt",header=F))
setwd("/Volumes/win/intern/statfe/datasets")
#As an alternative to interpolation, the yield to maturity can be found using a nonlinear root finder (equation solver) such as uniroot(), which is illustrated here:
uniroot(function(r) bondvalue(C,T,r,par) - price, c(0.001,.1))
################################################
#####  Code for figure 3.2  ####################
################################################
rates = as.matrix(read.table("WeeklyInterest.txt",header=F))
#As an alternative to interpolation, the yield to maturity can be found using a nonlinear root finder (equation solver) such as uniroot(), which is illustrated here:
uniroot(function(r) bondvalue(C,T,r,par) - price, c(0.001,.1))
################################################
#####  Code for figure 3.2  ####################
################################################
rates = as.matrix(read.table("WeeklyInterest.txt",header=F))
setwd("/Volumes/win/intern/statfe/datasets")
#As an alternative to interpolation, the yield to maturity can be found using a nonlinear root finder (equation solver) such as uniroot(), which is illustrated here:
uniroot(function(r) bondvalue(C,T,r,par) - price, c(0.001,.1))
################################################
#####  Code for figure 3.2  ####################
################################################
rates = as.matrix(read.table("WeeklyInterest.txt",header=F))
ff = rates[,4]/100
tb03 = rates[,5]/100
cm10 = rates[,6]/100
cm30 = rates[,7]/100
n=length(ff)
year = 1900 + rates[1:n,1:3] %*% c(1/12, 1/365 , 1) -1/12
pdf("threerates.pdf",width=6,height=5) # Fig 3.2
plot(year,tb03,type="l",xlim=c(1978,1994),lwd=3,ylab="rate",lty=2)
lines(year[cm30>0],cm10[cm30>0],lty=1,lwd=2,col="red")
lines(year[cm30>0],cm30[cm30>0],lty=3,lwd=4,col="blue")
legend("topright",c("3-month","10-year","30-year"),lty=c(2,1,3),lwd=c(3,2,4),
col=c("black","red","blue"))
setwd("/Volumes/win/intern/statfe/datasets")
#As an alternative to interpolation, the yield to maturity can be found using a nonlinear root finder (equation solver) such as uniroot(), which is illustrated here:
uniroot(function(r) bondvalue(C,T,r,par) - price, c(0.001,.1))
################################################
#####  Code for figure 3.2  ####################
################################################
rates = as.matrix(read.table("WeeklyInterest.txt",header=F))
ff = rates[,4]/100
tb03 = rates[,5]/100
cm10 = rates[,6]/100
cm30 = rates[,7]/100
n=length(ff)
year = 1900 + rates[1:n,1:3] %*% c(1/12, 1/365 , 1) -1/12
#pdf("threerates.pdf",width=6,height=5) # Fig 3.2
plot(year,tb03,type="l",xlim=c(1978,1994),lwd=3,ylab="rate",lty=2)
lines(year[cm30>0],cm10[cm30>0],lty=1,lwd=2,col="red")
lines(year[cm30>0],cm30[cm30>0],lty=3,lwd=4,col="blue")
legend("topright",c("3-month","10-year","30-year"),lty=c(2,1,3),lwd=c(3,2,4),
col=c("black","red","blue"))
setwd("/Volumes/win/intern/statfe/datasets")
#As an alternative to interpolation, the yield to maturity can be found using a nonlinear root finder (equation solver) such as uniroot(), which is illustrated here:
uniroot(function(r) bondvalue(C,T,r,par) - price, c(0.001,.1))
################################################
#####  Code for figure 3.2  ####################
################################################
rates = as.matrix(read.table("WeeklyInterest.txt",header=F))
head(rates)
ff = rates[,4]/100
tb03 = rates[,5]/100
cm10 = rates[,6]/100
cm30 = rates[,7]/100
n=length(ff)
year = 1900 + rates[1:n,1:3] %*% c(1/12, 1/365 , 1) -1/12
#pdf("threerates.pdf",width=6,height=5) # Fig 3.2
plot(year,tb03,type="l",xlim=c(1978,1994),lwd=3,ylab="rate",lty=2)
lines(year[cm30>0],cm10[cm30>0],lty=1,lwd=2,col="red")
lines(year[cm30>0],cm30[cm30>0],lty=3,lwd=4,col="blue")
legend("topright",c("3-month","10-year","30-year"),lty=c(2,1,3),lwd=c(3,2,4),
col=c("black","red","blue"))
setwd("/Volumes/win/intern/statfe/datasets")
#As an alternative to interpolation, the yield to maturity can be found using a nonlinear root finder (equation solver) such as uniroot(), which is illustrated here:
uniroot(function(r) bondvalue(C,T,r,par) - price, c(0.001,.1))
################################################
#####  Code for figure 3.2  ####################
################################################
rates = as.matrix(read.table("WeeklyInterest.txt",header=F))
head(rates)
ff = rates[,4]/100
tb03 = rates[,5]/100
cm10 = rates[,6]/100
cm30 = rates[,7]/100
ff
n=length(ff)
year = 1900 + rates[1:n,1:3] %*% c(1/12, 1/365 , 1) -1/12
#pdf("threerates.pdf",width=6,height=5) # Fig 3.2
plot(year,tb03,type="l",xlim=c(1978,1994),lwd=3,ylab="rate",lty=2)
lines(year[cm30>0],cm10[cm30>0],lty=1,lwd=2,col="red")
lines(year[cm30>0],cm30[cm30>0],lty=3,lwd=4,col="blue")
legend("topright",c("3-month","10-year","30-year"),lty=c(2,1,3),lwd=c(3,2,4),
col=c("black","red","blue"))
setwd("/Volumes/win/intern/statfe/datasets")
#As an alternative to interpolation, the yield to maturity can be found using a nonlinear root finder (equation solver) such as uniroot(), which is illustrated here:
uniroot(function(r) bondvalue(C,T,r,par) - price, c(0.001,.1))
################################################
#####  Code for figure 3.2  ####################
################################################
rates = as.matrix(read.table("WeeklyInterest.txt",header=F))
head(rates)
ff = rates[,4]/100
tb03 = rates[,5]/100
cm10 = rates[,6]/100
cm30 = rates[,7]/100
head(cm30)
head(cm10)
n=length(ff)
year = 1900 + rates[1:n,1:3] %*% c(1/12, 1/365 , 1) -1/12
#pdf("threerates.pdf",width=6,height=5) # Fig 3.2
plot(year,tb03,type="l",xlim=c(1978,1994),lwd=3,ylab="rate",lty=2)
lines(year[cm30>0],cm10[cm30>0],lty=1,lwd=2,col="red")
lines(year[cm30>0],cm30[cm30>0],lty=3,lwd=4,col="blue")
legend("topright",c("3-month","10-year","30-year"),lty=c(2,1,3),lwd=c(3,2,4),
col=c("black","red","blue"))
setwd("/Volumes/win/intern/statfe/datasets")
#As an alternative to interpolation, the yield to maturity can be found using a nonlinear root finder (equation solver) such as uniroot(), which is illustrated here:
uniroot(function(r) bondvalue(C,T,r,par) - price, c(0.001,.1))
################################################
#####  Code for figure 3.2  ####################
################################################
rates = as.matrix(read.table("WeeklyInterest.txt",header=F))
head(rates)
ff = rates[,4]/100
tb03 = rates[,5]/100
cm10 = rates[,6]/100
cm30 = rates[,7]/100
head(cm10,5)
n=length(ff)
year = 1900 + rates[1:n,1:3] %*% c(1/12, 1/365 , 1) -1/12
#pdf("threerates.pdf",width=6,height=5) # Fig 3.2
plot(year,tb03,type="l",xlim=c(1978,1994),lwd=3,ylab="rate",lty=2)
lines(year[cm30>0],cm10[cm30>0],lty=1,lwd=2,col="red")
lines(year[cm30>0],cm30[cm30>0],lty=3,lwd=4,col="blue")
legend("topright",c("3-month","10-year","30-year"),lty=c(2,1,3),lwd=c(3,2,4),
col=c("black","red","blue"))
setwd("/Volumes/win/intern/statfe/datasets")
#As an alternative to interpolation, the yield to maturity can be found using a nonlinear root finder (equation solver) such as uniroot(), which is illustrated here:
uniroot(function(r) bondvalue(C,T,r,par) - price, c(0.001,.1))
################################################
#####  Code for figure 3.2  ####################
################################################
rates = as.matrix(read.table("WeeklyInterest.txt",header=F))
head(rates)
ff = rates[,4]/100
tb03 = rates[,5]/100
cm10 = rates[,6]/100
cm30 = rates[,7]/100
head(cm30,5)
head(cm10,5)
n=length(ff)
year = 1900 + rates[1:n,1:3] %*% c(1/12, 1/365 , 1) -1/12
#pdf("threerates.pdf",width=6,height=5) # Fig 3.2
plot(year,tb03,type="l",xlim=c(1978,1994),lwd=3,ylab="rate",lty=2)
lines(year[cm30>0],cm10[cm30>0],lty=1,lwd=2,col="red")
lines(year[cm30>0],cm30[cm30>0],lty=3,lwd=4,col="blue")
legend("topright",c("3-month","10-year","30-year"),lty=c(2,1,3),lwd=c(3,2,4),
col=c("black","red","blue"))
setwd("/Volumes/win/intern/statfe/datasets")
#As an alternative to interpolation, the yield to maturity can be found using a nonlinear root finder (equation solver) such as uniroot(), which is illustrated here:
uniroot(function(r) bondvalue(C,T,r,par) - price, c(0.001,.1))
################################################
#####  Code for figure 3.2  ####################
################################################
rates = as.matrix(read.table("WeeklyInterest.txt",header=F))
head(rates)
ff = rates[,4]/100
tb03 = rates[,5]/100
cm10 = rates[,6]/100
cm30 = rates[,7]/100
tail(cm30,5)
head(cm10,5)
n=length(ff)
year = 1900 + rates[1:n,1:3] %*% c(1/12, 1/365 , 1) -1/12
#pdf("threerates.pdf",width=6,height=5) # Fig 3.2
plot(year,tb03,type="l",xlim=c(1978,1994),lwd=3,ylab="rate",lty=2)
lines(year[cm30>0],cm10[cm30>0],lty=1,lwd=2,col="red")
lines(year[cm30>0],cm30[cm30>0],lty=3,lwd=4,col="blue")
legend("topright",c("3-month","10-year","30-year"),lty=c(2,1,3),lwd=c(3,2,4),
col=c("black","red","blue"))
install.packages("fEcofin")
mk.maturity = read.csv("mk.maturity.csv", header = T)
setwd("/Volumes/win/intern/statfe/datasets")
mk.maturity = read.csv("mk.maturity.csv", header = T)
mk.zero2 = read.csv("mk.zero2.csv", header = T)
plot(mk.maturity[,1], mk.zero2[5,2:56], type = "l",
xlab = "maturity", ylab = "yield")
lines(mk.maturity[,1], mk.zero2[6,2:56], lty = 2, type = "l")
lines(mk.maturity[,1], mk.zero2[7,2:56], lty = 3, type = "l")
lines(mk.maturity[,1], mk.zero2[8,2:56], lty = 4, type = "l")
legend("bottomright", c("1985-12-01", "1986-01-01",
"1986-02-01", "1986-03-01"), lty = 1:4)
intForward = mk.maturity[,1]*mk.zero2[6,2:56]
xout=seq(0,20,length=200)
z1=spline(mk.maturity[,1],intForward,xout=xout)
forward = diff(z1$y)/diff(z1$x)
T_grid = (xout[-1]+xout[-200])/2
plot(T_grid,forward,type="l",lwd=2,ylim=c(0.06,0.11))
intForward = mk.maturity[,1]*mk.zero2[6,2:56]
xout=seq(0,20,length=200)
z1=spline(mk.maturity[,1],intForward,xout=xout)
forward = diff(z1$y)/diff(z1$x)
T_grid = (xout[-1]+xout[-200])/2
plot(T_grid,forward,type="l",lwd=2,ylim=c(0.06,0.11))
intForward = mk.maturity[,1]*mk.zero2[7,2:56]
z1=spline(mk.maturity[,1],intForward,xout=xout)
forward = diff(z1$y)/diff(z1$x)
lines(T_grid,forward,type="l",lwd=2,lty=2)
intForward = mk.maturity[,1]*mk.zero2[6,2:56]
xout=seq(0,20,length=200)
z1=spline(mk.maturity[,1],intForward,xout=xout)
forward = diff(z1$y)/diff(z1$x)
T_grid = (xout[-1]+xout[-200])/2
plot(T_grid,forward,type="l",lwd=2,ylim=c(0.06,0.11))
intForward = mk.maturity[,1]*mk.zero2[7,2:56]
z1=spline(mk.maturity[,1],intForward,xout=xout)
forward = diff(z1$y)/diff(z1$x)
lines(T_grid,forward,type="l",lwd=2,lty=2)
intForward = mk.maturity[,1]*mk.zero2[8,2:56]
z1=spline(mk.maturity[,1],intForward,xout=xout)
forward = diff(z1$y)/diff(z1$x)
lines(T_grid,forward,type="l",lwd=2,lty=3)
intForward = mk.maturity[,1]*mk.zero2[9,2:56]
z1=spline(mk.maturity[,1],intForward,xout=xout)
forward = diff(z1$y)/diff(z1$x)
lines(T_grid,forward,type="l",lwd=2,lty=4)
legend("bottomright",c("1985-12-01", "1986-01-01",
"1986-02-01", "1986-03-01"),lty=1:4,lwd=2)
